#!/bin/bash
set -e

BUILD_ROOT=$(realpath "${BASH_SOURCE[0]%/*}/..")
source "$BUILD_ROOT/helpers/message-helpers.sh"
source "$BUILD_ROOT/helpers/docker-helpers.sh"
source "$BUILD_ROOT/helpers/paths.sh"

print_header "Remove Package"

if [[ -z "$1" ]]; then
  print_error "Package name required"
  echo ""
  echo "Usage: $0 <package-name>"
  exit 1
fi

PACKAGE_NAME="$1"

print_info "Target architecture: $ARCH"
print_info "Repository: $REPO_DIR"

# Check if repository exists
if [[ ! -d "$REPO_DIR" ]]; then
  print_error "Repository directory not found: $REPO_DIR"
  exit 1
fi

# Check Docker is available
check_docker

# Find package files to confirm before running Docker
cd "$REPO_DIR"
FILES=$(ls ${PACKAGE_NAME}-[0-9]*.pkg.tar.* 2>/dev/null || true)

if [[ -z "$FILES" ]]; then
  print_error "Package '$PACKAGE_NAME' not found"
  exit 1
fi

# Confirm removal
echo ""
echo "Package files to remove:"
for file in $FILES; do
  echo "  - $file"
done
echo ""
read -p "Remove package '$PACKAGE_NAME'? (y/N) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
  print_info "Removal cancelled"
  exit 0
fi

# Build/update the Docker image (always use x86_64 for removal - it's architecture independent)
build_docker_image "$BUILD_DIR" "x86_64"

print_info "Removing package..."

# Ensure directory is writable by container user
make_dir_writable "$REPO_DIR"

# Run the removal script in Docker (always use x86_64 image)
docker run --rm --platform linux/amd64 \
  -e ARCH="$ARCH" \
  -v "$BUILD_ROOT/pkgs.omarchy.org:/pkgs.omarchy.org" \
  -v "$BUILD_DIR:/build:ro" \
  omarchy-pkg-builder:latest-x86_64 /build/remove-package.sh "$PACKAGE_NAME"

RESULT=$?

echo ""
if [[ $RESULT -eq 0 ]]; then
  print_success "Package removal completed successfully!"
else
  print_error "Package removal failed"
  exit $RESULT
fi
